"use strict";var ApplicationConfiguration=function(){var applicationModuleName="mypm",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils","rcWizard","rcForm","rcDisabledBootstrap","ui.gravatar","textAngular","angularFileUpload"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("addressstores"),ApplicationConfiguration.registerModule("articles"),ApplicationConfiguration.registerModule("contactnotes"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("my-pmdirectives"),ApplicationConfiguration.registerModule("properties"),ApplicationConfiguration.registerModule("purchasercontactnotes"),ApplicationConfiguration.registerModule("purchasers"),ApplicationConfiguration.registerModule("users"),ApplicationConfiguration.registerModule("vendorcontactnotes"),ApplicationConfiguration.registerModule("vendors"),angular.module("addressstores").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Addressstores","addressstores","dropdown","/addressstores(/create)?"),Menus.addSubMenuItem("topbar","addressstores","List Addressstores","addressstores"),Menus.addSubMenuItem("topbar","addressstores","New Addressstore","addressstores/create")}]),angular.module("addressstores").config(["$stateProvider",function($stateProvider){$stateProvider.state("listAddressstores",{url:"/addressstores",templateUrl:"modules/addressstores/views/list-addressstores.client.view.html"}).state("createAddressstore",{url:"/addressstores/create",templateUrl:"modules/addressstores/views/create-addressstore.client.view.html"}).state("viewAddressstore",{url:"/addressstores/:addressstoreId",templateUrl:"modules/addressstores/views/view-addressstore.client.view.html"}).state("editAddressstore",{url:"/addressstores/:addressstoreId/edit",templateUrl:"modules/addressstores/views/edit-addressstore.client.view.html"})}]),angular.module("addressstores").controller("AddressstoresController",["$scope","$stateParams","$location","Authentication","Addressstores",function($scope,$stateParams,$location,Authentication,Addressstores){$scope.authentication=Authentication,$scope.create=function(){var addressstore=new Addressstores({name:this.name});addressstore.$save(function(response){$location.path("addressstores/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(addressstore){if(addressstore){addressstore.$remove();for(var i in $scope.addressstores)$scope.addressstores[i]===addressstore&&$scope.addressstores.splice(i,1)}else $scope.addressstore.$remove(function(){$location.path("addressstores")})},$scope.update=function(){var addressstore=$scope.addressstore;addressstore.$update(function(){$location.path("addressstores/"+addressstore._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.addressstores=Addressstores.query()},$scope.findOne=function(){$scope.addressstore=Addressstores.get({addressstoreId:$stateParams.addressstoreId})}}]),angular.module("addressstores").factory("Addressstores",["$resource",function($resource){return $resource("addressstores/:addressstoreId",{addressstoreId:"@_id"},{update:{method:"PUT"}})}]),angular.module("articles").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Articles","articles","dropdown","/articles(/create)?"),Menus.addSubMenuItem("topbar","articles","List Articles","articles"),Menus.addSubMenuItem("topbar","articles","New Article","articles/create")}]),angular.module("articles").config(["$stateProvider",function($stateProvider){$stateProvider.state("listArticles",{url:"/articles",templateUrl:"modules/articles/views/list-articles.client.view.html"}).state("createArticle",{url:"/articles/create",templateUrl:"modules/articles/views/create-article.client.view.html"}).state("viewArticle",{url:"/articles/:articleId",templateUrl:"modules/articles/views/view-article.client.view.html"}).state("editArticle",{url:"/articles/:articleId/edit",templateUrl:"modules/articles/views/edit-article.client.view.html"})}]),angular.module("articles").controller("ArticlesController",["$scope","$stateParams","$location","Authentication","Articles",function($scope,$stateParams,$location,Authentication,Articles){$scope.authentication=Authentication,$scope.create=function(){var article=new Articles({title:this.title,content:this.content});article.$save(function(response){$location.path("articles/"+response._id),$scope.title="",$scope.content=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(article){if(article){article.$remove();for(var i in $scope.articles)$scope.articles[i]===article&&$scope.articles.splice(i,1)}else $scope.article.$remove(function(){$location.path("articles")})},$scope.update=function(){var article=$scope.article;article.$update(function(){$location.path("articles/"+article._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.articles=Articles.query()},$scope.findOne=function(){$scope.article=Articles.get({articleId:$stateParams.articleId})}}]),angular.module("articles").factory("Articles",["$resource",function($resource){return $resource("articles/:articleId",{articleId:"@_id"},{update:{method:"PUT"}})}]),angular.module("contactnotes").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Contactnotes","contactnotes","dropdown","/contactnotes(/create)?"),Menus.addSubMenuItem("topbar","contactnotes","List Contactnotes","contactnotes"),Menus.addSubMenuItem("topbar","contactnotes","New Contactnote","contactnotes/create")}]),angular.module("contactnotes").config(["$stateProvider",function($stateProvider){$stateProvider.state("listContactnotes",{url:"/contactnotes",templateUrl:"modules/contactnotes/views/list-contactnotes.client.view.html"}).state("createContactnote",{url:"/contactnotes/create",templateUrl:"modules/contactnotes/views/create-contactnote.client.view.html"}).state("viewContactnote",{url:"/contactnotes/:contactnoteId",templateUrl:"modules/contactnotes/views/view-contactnote.client.view.html"}).state("editContactnote",{url:"/contactnotes/:contactnoteId/edit",templateUrl:"modules/contactnotes/views/edit-contactnote.client.view.html"})}]),angular.module("contactnotes").controller("ContactnotesController",["$scope","$stateParams","$location","Authentication","Contactnotes",function($scope,$stateParams,$location,Authentication,Contactnotes){$scope.authentication=Authentication,$scope.create=function(){var contactnote=new Contactnotes({name:this.name});contactnote.$save(function(response){$location.path("contactnotes/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(contactnote){if(contactnote){contactnote.$remove();for(var i in $scope.contactnotes)$scope.contactnotes[i]===contactnote&&$scope.contactnotes.splice(i,1)}else $scope.contactnote.$remove(function(){$location.path("contactnotes")})},$scope.update=function(){var contactnote=$scope.contactnote;contactnote.$update(function(){$location.path("contactnotes/"+contactnote._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.contactnotes=Contactnotes.query()},$scope.findOne=function(){$scope.contactnote=Contactnotes.get({contactnoteId:$stateParams.contactnoteId})}}]),angular.module("contactnotes").factory("Contactnotes",["$resource",function($resource){return $resource("contactnotes/:contactnoteId",{contactnoteId:"@_id"},{update:{method:"PUT"}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("dashboard",{url:"/dash",templateUrl:"modules/core/views/dashboard.client.view.html"}).state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("DashboardController",["$scope","$location","Authentication",function($scope,$location,Authentication){$scope.authentication=Authentication,$scope.user=Authentication.user,$scope.user||$location.path("/")}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").controller("SidebarController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication,$scope.menu={items:[{navUrl:"+",navText:"Vendor",navGroup:"vendor",navIon:"divider"},{navUrl:"/#!/vendors/create",navText:"Register Vendor",navGroup:"vendor",navIon:"glyphicon glyphicon-user"},{navUrl:"/#!/vendors",navText:"Find Vendor",navGroup:"vendor",navIon:"glyphicon glyphicon-search"},{navUrl:"/#!/vendors/email",navText:"Email Vendor",navGroup:"vendor",navIon:"glyphicon glyphicon-envelope"},{navUrl:"/#!/notes/vendors",navText:"Vendor Notes",navGroup:"comments",navIon:"glyphicon glyphicon-pencil"},{navUrl:"+",navText:"Property",navGroup:"property",navIon:"divider"},{navUrl:"#!//properties/pdf",navText:"Create Property PDF",navGroup:"property",navIon:"glyphicon glyphicon-file"},{navUrl:"#!//properties/view",navText:"Search Property",navGroup:"property",navIon:"glyphicon glyphicon-zoom-in"},{navUrl:"#!/purchaser/register/search",navText:"Purchaser Request(s)",navGroup:"property",navIon:"glyphicon glyphicon-copy"},{navUrl:"+",navText:"Purchaser",navGroup:"purchaser",navIon:"divider"},{navUrl:"/#!/purchasers/create",navText:"Register Purchaser",navGroup:"purchaser",navIon:"glyphicon glyphicon-plus"},{navUrl:"/#!/purchasers",navText:"Find Purchaser",navGroup:"purchaser",navIon:"glyphicon glyphicon-tag"},{navUrl:"/#!/purchasers/email",navText:"Email Purchaser",navGroup:"purchaser",navIon:"glyphicon glyphicon-bookmark"},{navUrl:"/#!/notes/purchasers",navText:"Purchaser Notes",navGroup:"comments",navIon:"glyphicon glyphicon-pencil"},{navUrl:"+",navText:"Appointments",navGroup:"appointment",navIon:"divider"},{navUrl:"/#!/appointment/create",navText:"Create New Appointment",navGroup:"appointment",navIon:"glyphicon glyphicon-paperclip"},{navUrl:"/#!/appointment/view",navText:"View Appointment",navGroup:"appointment",navIon:"glyphicon glyphicon-calendar"},{navUrl:"+",navText:"Admin",navGroup:"admin",navIon:"divider"},{navUrl:"/auth/signout",navText:"Signout",navGroup:"admin",navIon:"glyphicon glyphicon-log-out"},{navUrl:"/#!/settings/profile",navText:"Edit Profile",navGroup:"admin",navIon:"glyphicon glyphicon-link"},{navUrl:"/#!/settings/password",navText:"Change Password",navGroup:"admin",navIon:"glyphicon glyphicon-align-center"}]}}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("my-pmdirectives").directive("customerBriefDetails",[function(){return{templateUrl:"../modules/my-pmdirectives/views/customer-brief-details.client.view.html",restrict:"E",scope:{customer:"=",templateOptions:"=to"},controller:["$scope",function($scope){}]}}]),angular.module("my-pmdirectives").directive("editRegistration",["Vendors","Purchasers","$location",function(Vendors,Purchasers,$location){return{templateUrl:"../modules/my-pmdirectives/views/edit-registration.client.view.html",restrict:"E",scope:{customer:"=",templateOptions:"=to"},controller:["$scope",function($scope){$scope.update=function(){$scope.$broadcast("show-errors-check-validity"),$scope.regEditForm.$invalid||("vendor"===$scope.templateOptions.customerType&&$scope.updateVendor(),"purchaser"===$scope.templateOptions.customerType&&$scope.updatePurchaser())},$scope.CallBackFinishSearch=function(mode){$scope.address.FormattedAddress.Unit&&($scope.customer.addressLine1=$scope.address.FormattedAddress.Unit),$scope.address.FormattedAddress.Street&&($scope.customer.addressLine2=$scope.address.FormattedAddress.Street),$scope.address.FormattedAddress.Town&&($scope.customer.addressLine3=$scope.address.FormattedAddress.Town),$scope.address.FormattedAddress.County&&($scope.customer.addressLine4=$scope.address.FormattedAddress.County),$scope.address.FormattedAddress.PostCode&&($scope.customer.postcode=$scope.address.FormattedAddress.PostCode),$scope.address.FormattedAddress.Country&&($scope.customer.country=$scope.address.FormattedAddress.Country)},$scope.updateVendor=function(){var vendor=new Vendors({_id:$scope.customer._id,title:$scope.customer.title,firstName:$scope.customer.firstName,lastName:$scope.customer.lastName,phonePrimary:$scope.customer.phonePrimary,phoneSecondary:$scope.customer.phoneSecondary,emailPrimary:$scope.customer.emailPrimary,emailSecondary:$scope.customer.emailSecondary,addressLine1:$scope.customer.addressLine1,addressLine2:$scope.customer.addressLine2,addressLine3:$scope.customer.addressLine3,addressLine4:$scope.customer.addressLine4,postcode:$scope.customer.postcode,country:$scope.customer.country});vendor.$update(function(){$location.path("vendors/"+vendor._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.updatePurchaser=function(){var purchaser=new Purchasers({_id:$scope.customer._id,title:$scope.customer.title,firstName:$scope.customer.firstName,lastName:$scope.customer.lastName,phonePrimary:$scope.customer.phonePrimary,phoneSecondary:$scope.customer.phoneSecondary,emailPrimary:$scope.customer.emailPrimary,emailSecondary:$scope.customer.emailSecondary,addressLine1:$scope.customer.addressLine1,addressLine2:$scope.customer.addressLine2,addressLine3:$scope.customer.addressLine3,addressLine4:$scope.customer.addressLine4,postcode:$scope.customer.postcode,country:$scope.customer.country});purchaser.$update(function(){$location.path("purchasers/"+purchaser._id)},function(errorResponse){$scope.error=errorResponse.data.message})}}]}}]);var googlePlacesDirective=function(){var componentForm={premise:"long_name",street_number:"short_name",route:"long_name",sublocality_level_1:"long_name",locality:"long_name",administrative_area_level_1:"short_name",country:"long_name",postal_code:"short_name",postal_town:"long_name",administrative_area_level_2:"long_name"},mapping={premise:"BuildingName",street_number:"Unit",route:"Street",sublocality_level_1:"Suburb",locality:"City",administrative_area_level_1:"State",country:"Country",postal_code:"PostCode",postal_town:"Town",administrative_area_level_2:"County"};return{require:"ngModel",restrict:"E",replace:!0,scope:{ngModel:"=",address:"=?",callback:"&myFindFinishCallback"},template:'<input id="google_places_ac" name="google_places_ac" type="text" class="input-block-level"/>',link:function(scope,element,attrs,model){var options={types:["geocode"]},autocomplete=new google.maps.places.Autocomplete($("#google_places_ac")[0],options);google.maps.event.addListener(autocomplete,"place_changed",function(){for(var place=autocomplete.getPlace(),location=place.geometry&&place.geometry.location?{Latitude:place.geometry.location.lat(),Longitude:place.geometry.location.lng()}:{},i=0;i<place.address_components.length;i++){var addressType=place.address_components[i].types[0];if(componentForm[addressType]){var val=place.address_components[i][componentForm[addressType]];location[mapping[addressType]]=val}}location.FormattedAddress=place.formatted_address,location.PlaceId=place.place_id,scope.$apply(function(){scope.address=location,model.$setViewValue(location),element.val(location[attrs.value]),scope.callback()})})}}};angular.module("my-pmdirectives").directive("googlePlaces",[googlePlacesDirective]),angular.module("my-pmdirectives").directive("newRegistration",["Vendors","Purchasers","$location",function(Vendors,Purchasers,$location){return{templateUrl:"../modules/my-pmdirectives/views/new-registration.client.view.html",restrict:"E",scope:{templateOptions:"=to"},controller:["$scope",function($scope){$scope.CallBackFinishSearch=function(mode){$scope.address.FormattedAddress.Unit&&($scope.addressLine1=$scope.address.FormattedAddress.Unit),$scope.address.FormattedAddress.Street&&($scope.addressLine2=$scope.address.FormattedAddress.Street),$scope.address.FormattedAddress.Town&&($scope.addressLine3=$scope.address.FormattedAddress.Town),$scope.address.FormattedAddress.County&&($scope.addressLine4=$scope.address.FormattedAddress.County),$scope.address.FormattedAddress.PostCode&&($scope.postcode=$scope.address.FormattedAddress.PostCode),$scope.address.FormattedAddress.Country&&($scope.country=$scope.address.FormattedAddress.Country)},$scope.create=function(){$scope.$broadcast("show-errors-check-validity"),$scope.regForm.$invalid||(console.log("Create Called Do Something"),"vendor"===$scope.templateOptions.customerType&&$scope.createVendor(),"purchaser"===$scope.templateOptions.customerType&&$scope.createPurchaser())},$scope.createVendor=function(){console.log("Create Vendor Called");var vendor=new Vendors({title:$scope.title,firstName:$scope.firstName,lastName:$scope.lastName,phonePrimary:$scope.phonePrimary,phoneSecondary:$scope.phoneSecondary,emailPrimary:$scope.emailPrimary,emailSecondary:$scope.emailSecondary,addressLine1:$scope.addressLine1,addressLine2:$scope.addressLine2,addressLine3:$scope.addressLine3,addressLine4:$scope.addressLine4,postcode:$scope.postcode,country:$scope.country});vendor.$save(function(response){$location.path("vendors/"+response._id),$scope.firstName=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.createPurchaser=function(){var purchaser=new Purchasers({title:$scope.title,firstName:$scope.firstName,lastName:$scope.lastName,phonePrimary:$scope.phonePrimary,phoneSecondary:$scope.phoneSecondary,emailPrimary:$scope.emailPrimary,emailSecondary:$scope.emailSecondary,addressLine1:$scope.addressLine1,addressLine2:$scope.addressLine2,addressLine3:$scope.addressLine3,addressLine4:$scope.addressLine4,postcode:$scope.postcode,country:$scope.country});purchaser.$save(function(response){$location.path("purchasers/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})}}]}}]),angular.module("my-pmdirectives").directive("ngThumb",["$window",function($window){var helper={support:!(!$window.FileReader||!$window.CanvasRenderingContext2D),isFile:function(item){return angular.isObject(item)&&item instanceof $window.File},isImage:function(file){var type="|"+file.type.slice(file.type.lastIndexOf("/")+1)+"|";return-1!=="|jpg|png|jpeg|bmp|gif|".indexOf(type)}};return{restrict:"A",template:"<canvas/>",link:function(scope,element,attributes){function onLoadFile(event){var img=new Image;img.onload=onLoadImage,img.src=event.target.result}function onLoadImage(){var width=params.width||this.width/this.height*params.height,height=params.height||this.height/this.width*params.width;canvas.attr({width:width,height:height}),canvas[0].getContext("2d").drawImage(this,0,0,width,height)}if(helper.support){var params=scope.$eval(attributes.ngThumb);if(helper.isFile(params.file)&&helper.isImage(params.file)){var canvas=element.find("canvas"),reader=new FileReader;reader.onload=onLoadFile,reader.readAsDataURL(params.file)}}}}}]),angular.module("properties").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Properties","properties","dropdown","/properties(/create)?"),Menus.addSubMenuItem("topbar","properties","List Properties","properties"),Menus.addSubMenuItem("topbar","properties","New Property","properties/create")}]),angular.module("properties").config(["$stateProvider",function($stateProvider){$stateProvider.state("listProperties",{url:"/properties",templateUrl:"modules/properties/views/list-properties.client.view.html"}).state("createProperty",{url:"/properties/vendors/:vendorId/create",templateUrl:"modules/properties/views/create-property.client.view.html"}).state("viewProperty",{url:"/properties/:propertyId",templateUrl:"modules/properties/views/view-property.client.view.html"}).state("editProperty",{url:"/properties/:propertyId/edit",templateUrl:"modules/properties/views/edit-property.client.view.html"})}]),angular.module("properties").controller("PropertiesController",["$scope","$stateParams","$location","$http","Authentication","Properties","FileUploader","Vendors",function($scope,$stateParams,$location,$http,Authentication,Properties,FileUploader,Vendors){function _resetAddress(){$scope.addressLine1="",$scope.addressLine2="",$scope.addressLine3="",$scope.addressLine4="",$scope.postcode="",$scope.country=""}function _updateAddressSameAsRegisterd(){$scope.addressLine1=$scope.vendor.addressLine1,$scope.addressLine2=$scope.vendor.addressLine2,$scope.addressLine3=$scope.vendor.addressLine3,$scope.addressLine4=$scope.vendor.addressLine4,$scope.postcode=$scope.vendor.postcode,$scope.country=$scope.vendor.country}$scope.authentication=Authentication,$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.ChkRegAddressChanged=function(){var chkStatus=parseInt($scope.chkRegAddress);chkStatus&&_updateAddressSameAsRegisterd(),chkStatus||_resetAddress()},$scope.findVendor=function(){$scope.vendor=Vendors.get({vendorId:$stateParams.vendorId})};var uploader=$scope.uploader=new FileUploader({url:"upload.php"});uploader.filters.push({name:"imageFilter",fn:function(item,options){var type="|"+item.type.slice(item.type.lastIndexOf("/")+1)+"|";return-1!=="|jpg|png|jpeg|bmp|gif|".indexOf(type)}}),uploader.onWhenAddingFileFailed=function(item,filter,options){console.info("onWhenAddingFileFailed",item,filter,options)},uploader.onAfterAddingFile=function(fileItem){console.info("onAfterAddingFile",fileItem)},uploader.onAfterAddingAll=function(addedFileItems){console.info("onAfterAddingAll",addedFileItems)},uploader.onBeforeUploadItem=function(item){console.info("onBeforeUploadItem",item)},uploader.onProgressItem=function(fileItem,progress){console.info("onProgressItem",fileItem,progress)},uploader.onProgressAll=function(progress){console.info("onProgressAll",progress)},uploader.onSuccessItem=function(fileItem,response,status,headers){console.info("onSuccessItem",fileItem,response,status,headers)},uploader.onErrorItem=function(fileItem,response,status,headers){console.info("onErrorItem",fileItem,response,status,headers)},uploader.onCancelItem=function(fileItem,response,status,headers){console.info("onCancelItem",fileItem,response,status,headers)},uploader.onCompleteItem=function(fileItem,response,status,headers){console.info("onCompleteItem",fileItem,response,status,headers)},uploader.onCompleteAll=function(){console.info("onCompleteAll")},console.info("uploader",uploader),$scope.CallBackFinishSearch=function(mode){$scope.address.FormattedAddress.Unit&&($scope.addressLine1=$scope.address.FormattedAddress.Unit),$scope.address.FormattedAddress.Street&&($scope.addressLine2=$scope.address.FormattedAddress.Street),$scope.address.FormattedAddress.Town&&($scope.addressLine3=$scope.address.FormattedAddress.Town),$scope.address.FormattedAddress.County&&($scope.addressLine4=$scope.address.FormattedAddress.County),$scope.address.FormattedAddress.PostCode&&($scope.postcode=$scope.address.FormattedAddress.PostCode),$scope.address.FormattedAddress.Country&&($scope.country=$scope.address.FormattedAddress.Country)},$scope.create=function(){var property=new Properties({name:this.name});property.$save(function(response){$location.path("properties/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(property){if(property){property.$remove();for(var i in $scope.properties)$scope.properties[i]===property&&$scope.properties.splice(i,1)}else $scope.property.$remove(function(){$location.path("properties")})},$scope.update=function(){var property=$scope.property;property.$update(function(){$location.path("properties/"+property._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.properties=Properties.query()},$scope.findOne=function(){$scope.property=Properties.get({propertyId:$stateParams.propertyId})}}]),angular.module("properties").factory("Properties",["$resource",function($resource){return $resource("properties/:propertyId",{propertyId:"@_id"},{update:{method:"PUT"}})}]),angular.module("purchasercontactnotes").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Purchasercontactnotes","purchasercontactnotes","dropdown","/purchasercontactnotes(/create)?"),Menus.addSubMenuItem("topbar","purchasercontactnotes","List Purchasercontactnotes","purchasercontactnotes"),Menus.addSubMenuItem("topbar","purchasercontactnotes","New Purchasercontactnote","purchasercontactnotes/create")}]),angular.module("purchasercontactnotes").config(["$stateProvider",function($stateProvider){$stateProvider.state("listPurchasercontactnotes",{url:"/notes/purchasers",templateUrl:"modules/purchasercontactnotes/views/list-purchasercontactnotes.client.view.html"}).state("createPurchasercontactnote",{url:"/notes/purchasers/:purchaserId/create",templateUrl:"modules/purchasercontactnotes/views/create-purchasercontactnote.client.view.html"}).state("purchaserNotesView",{url:"/notes/purchasers/:purchaserId/view",templateUrl:"modules/purchasercontactnotes/views/view-purchasercontactnote.client.view.html"})}]),angular.module("purchasercontactnotes").controller("PurchasercontactnotesController",["$scope","$stateParams","$location","Authentication","Purchasers","Purchasercontactnotes",function($scope,$stateParams,$location,Authentication,Purchasers,Purchasercontactnotes){$scope.authentication=Authentication,$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.options={secure:!0,size:150,defaultImage:"mm"},$scope.create=function(){var purchasercontactnote=new Purchasercontactnotes({notes:this.htmlVariable,purchaser:$scope.purchaser._id});purchasercontactnote.$save(function(response){$location.path("notes/purchasers/"+$scope.purchaser._id+"/view"),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(purchasercontactnote){if(purchasercontactnote){purchasercontactnote.$remove();for(var i in $scope.purchasercontactnotes)$scope.purchasercontactnotes[i]===purchasercontactnote&&$scope.purchasercontactnotes.splice(i,1)}else $scope.purchasercontactnote.$remove(function(){$location.path("purchasercontactnotes")})},$scope.update=function(){var purchasercontactnote=$scope.purchasercontactnote;purchasercontactnote.$update(function(){$location.path("purchasercontactnotes/"+purchasercontactnote._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.purchasercontactnotes=Purchasercontactnotes.query()},$scope.findOne=function(){$scope.purchasercontactnote=Purchasercontactnotes.get({purchasercontactnoteId:$stateParams.purchasercontactnoteId})},$scope.findAllPurchasers=function(){$scope.purchasers=Purchasers.query()},$scope.findPurchaserOne=function(){$scope.purchaser=Purchasers.get({purchaserId:$stateParams.purchaserId})}}]),angular.module("purchasercontactnotes").factory("Purchasercontactnotes",["$resource",function($resource){return $resource("purchasercontactnotes/:purchasercontactnoteId",{purchasercontactnoteId:"@_id"},{update:{method:"PUT"}})}]),angular.module("purchasers").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Purchasers","purchasers","dropdown","/purchasers(/create)?"),Menus.addSubMenuItem("topbar","purchasers","List Purchasers","purchasers"),Menus.addSubMenuItem("topbar","purchasers","New Purchaser","purchasers/create")}]),angular.module("purchasers").config(["$stateProvider",function($stateProvider){$stateProvider.state("listPurchasers",{url:"/purchasers",templateUrl:"modules/purchasers/views/list-purchasers.client.view.html"}).state("createPurchaser",{url:"/purchasers/create",templateUrl:"modules/purchasers/views/create-purchaser.client.view.html"}).state("viewPurchaser",{url:"/purchasers/:purchaserId",templateUrl:"modules/purchasers/views/view-purchaser.client.view.html"}).state("editPurchaser",{url:"/purchasers/:purchaserId/edit",templateUrl:"modules/purchasers/views/edit-purchaser.client.view.html"})}]),angular.module("purchasers").controller("PurchasersController",["$scope","$stateParams","$location","Authentication","Purchasers","$q","$timeout",function($scope,$stateParams,$location,Authentication,Purchasers,$q,$timeout){$scope.authentication=Authentication,
$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.find=function(){$scope.purchasers=Purchasers.query()},$scope.findOne=function(){$scope.purchaser=Purchasers.get({purchaserId:$stateParams.purchaserId})}}]),angular.module("purchasers").factory("Purchasers",["$resource",function($resource){return $resource("purchasers/:purchaserId",{purchaserId:"@_id"},{update:{method:"PUT"}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/dash"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/dash")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/dash")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(response){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]),angular.module("vendorcontactnotes").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Vendorcontactnotes","vendorcontactnotes","dropdown","/vendorcontactnotes(/create)?"),Menus.addSubMenuItem("topbar","vendorcontactnotes","List Vendorcontactnotes","vendorcontactnotes"),Menus.addSubMenuItem("topbar","vendorcontactnotes","New Vendorcontactnote","vendorcontactnotes/create")}]),angular.module("vendorcontactnotes").config(["$stateProvider",function($stateProvider){$stateProvider.state("listVendorcontactnotes",{url:"/notes/vendors",templateUrl:"modules/vendorcontactnotes/views/list-vendorcontactnotes.client.view.html"}).state("createVendorcontactnote",{url:"/notes/vendors/:vendorId/create",templateUrl:"modules/vendorcontactnotes/views/create-vendorcontactnote.client.view.html"}).state("vendorNotesView",{url:"/notes/vendors/:vendorId/view",templateUrl:"modules/vendorcontactnotes/views/view-vendorcontactnote.client.view.html"})}]),angular.module("vendorcontactnotes").controller("VendorcontactnotesController",["$scope","$stateParams","$location","Authentication","Vendors","Vendorcontactnotes",function($scope,$stateParams,$location,Authentication,Vendors,Vendorcontactnotes){$scope.authentication=Authentication,$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.create=function(){console.log("Vendor Details"+$scope.vendor);var vendorcontactnote=new Vendorcontactnotes({notes:this.htmlVariable,vendor:$scope.vendor._id});vendorcontactnote.$save(function(response){$location.path("notes/vendors/"+$scope.vendor._id+"/view"),$scope.htmlVariable=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(vendorcontactnote){if(vendorcontactnote){vendorcontactnote.$remove();for(var i in $scope.vendorcontactnotes)$scope.vendorcontactnotes[i]===vendorcontactnote&&$scope.vendorcontactnotes.splice(i,1)}else $scope.vendorcontactnote.$remove(function(){$location.path("vendorcontactnotes")})},$scope.update=function(){var vendorcontactnote=$scope.vendorcontactnote;vendorcontactnote.$update(function(){$location.path("vendorcontactnotes/"+vendorcontactnote._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){console.log("find"),$scope.vendorcontactnotes=Vendorcontactnotes.query()},$scope.findOne=function(){$scope.vendorcontactnote=Vendorcontactnotes.get({vendorcontactnoteId:$stateParams.vendorcontactnoteId})},$scope.findVendorOne=function(){$scope.vendor=Vendors.get({vendorId:$stateParams.vendorId})},$scope.findAllVendor=function(){$scope.vendors=Vendors.query()}}]),angular.module("vendorcontactnotes").factory("Vendorcontactnotes",["$resource",function($resource){return $resource("vendorcontactnotes/:vendorcontactnoteId",{vendorcontactnoteId:"@_id"},{update:{method:"PUT"}})}]),angular.module("vendors").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Vendors","vendors","dropdown","/vendors(/create)?"),Menus.addSubMenuItem("topbar","vendors","List Vendors","vendors"),Menus.addSubMenuItem("topbar","vendors","New Vendor","vendors/create")}]),angular.module("vendors").config(["$stateProvider",function($stateProvider){$stateProvider.state("listVendors",{url:"/vendors",templateUrl:"modules/vendors/views/list-vendors.client.view.html"}).state("createVendor",{url:"/vendors/create",templateUrl:"modules/vendors/views/create-vendor.client.view.html"}).state("viewVendor",{url:"/vendors/:vendorId",templateUrl:"modules/vendors/views/view-vendor.client.view.html"}).state("editVendor",{url:"/vendors/:vendorId/edit",templateUrl:"modules/vendors/views/edit-vendor.client.view.html"})}]),angular.module("vendors").controller("VendorsController",["$scope","$stateParams","$location","Authentication","Vendors","$q","$timeout",function($scope,$stateParams,$location,Authentication,Vendors,$q,$timeout){$scope.authentication=Authentication,$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.find=function(){$scope.vendors=Vendors.query()},$scope.findOne=function(){$scope.vendor=Vendors.get({vendorId:$stateParams.vendorId})}}]),angular.module("vendors").factory("Vendors",["$resource",function($resource){return $resource("vendors/:vendorId",{vendorId:"@_id"},{update:{method:"PUT"}})}]);